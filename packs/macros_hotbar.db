{"_id":"C9oR0A2jUBt4ZJq8","name":"Death Check","type":"script","scope":"global","img":"modules/fvtt_mosh_1e_psg/icons/rolltables/death_check.png","command":"async function rollCheck(rollString) {\n  //init vars\n  rollAdvDis = rollString.includes(\"[\");\n  //translate rollString into foundry roll string format\n  if (rollAdvDis === true) {\n    //extract dice needed\n    rollDice = rollString.substr(0,rollString.indexOf(\"[\")).concat(',',rollString.substr(0,rollString.indexOf(\"[\")));\n    //make adv/dis template\n    rollTemplate = '{[diceSet]}';\n    //make foundry roll string\n    rollStringParsed = rollTemplate.replace(\"[diceSet]\",rollDice);\n  } else {\n    rollStringParsed = rollString;\n  }\n  //roll dice\n  let macroRoll = await new Roll(rollStringParsed).evaluate();\n  //assign to vars + replace 10s with 0s\n  if (rollAdvDis === true) {\n    //get values\n    rollA1 = macroRoll.dice[0].results[0].result;\n    rollB1 = macroRoll.dice[1].results[0].result;\n    //replace 10s\n    if (rollA1 === 10) {rollA1 = 0;}\n    if (rollB1 === 10) {rollB1 = 0;}\n  } else {\n    //get values\n    rollA1 = macroRoll.dice[0].results[0].result;\n    //replace 10s\n    if (rollA1 === 10) {rollA1= 0;}\n  }\n  //choose best value based on Adv/Dis\n  if (rollAdvDis === true) {\n    if (rollString.includes(\"[+]\") === true) {\n      if(rollA1 > rollB1) { \n        finalRoll = rollA1;\n      } else {\n        finalRoll = rollB1;\n      }\n    } else if (rollString.includes(\"[-]\") === true) {\n      if(rollA1 < rollB1) { \n        finalRoll = rollA1;\n      } else {\n        finalRoll = rollB1;\n      }\n    }\n  } else {\n    finalRoll = rollA1;\n  }\n  //get table result\n  tableResult = game.tables.getName(\"Death Check\").getResultsForRoll(finalRoll);\n  //create chat message template\n  macroResult = `\n<div class=\"mosh\">\n  <div class=\"rollcontainer\">\n    <div class=\"flexrow\" style=\"margin-bottom : 5px;\">\n      <div class=\"rollweaponh1\">${tableResult[0].parent.name}</div>\n      <div style=\"text-align: right\"><img class=\"roll-image\" src=\"${tableResult[0].img}\" title=\"${tableResult[0].parent.name}\" /></div>\n    </div>\n    <div class=\"description\" style=\"margin-bottom : 20px;\">${tableResult[0].text}</div>\n  </div>\n</div>\n`;\n  //make message ID\n  chatId = randomID();\n  //get speaker character\n  activeCharacter = canvas.scene.data.tokens.find(token => token.name = game.user.character.name);\n  //make message\n  macroMsg = await macroRoll.toMessage({\n    id: chatId,\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker({token: activeCharacter}),\n    content: macroResult\n  },{keepId:true});\n  //make dice\n  await game.dice3d.waitFor3DAnimationByMessageID(chatId);\n}\n\nnew Dialog({\n  title: `Death Check`,\n  content: `\n<style>\n  .macro_window{\n    background: rgb(230,230,230);\n    border-radius: 9px;\n  }\n  .macro_img{\n    display: flex;\n    justify-content: center;\n  }\n  .macro_desc{\n    font-family: \"Roboto\", sans-serif;\n    font-size: 10.5pt;\n    font-weight: 400;\n    padding-top: 8px;\n    padding-right: 8px;\n    padding-bottom: 8px;\n  }\n  .grid-2col {\n    display: grid;\n    grid-column: span 2 / span 2;\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n    gap: 2px;\n    padding: 0;\n  }\n</style>\n\n<div class =\"macro_window\" style=\"margin-bottom : 7px;\">\n  <div class=\"grid grid-2col\" style=\"grid-template-columns: 150px auto\">\n    <div class=\"macro_img\"><img src=\"modules/fvtt_mosh_1e_psg/icons/rolltables/death_check.png\" style=\"border:none\"/></div>\n    <div class=\"macro_desc\"><h3>Death Check</h3>Whenever you would die, the Warden makes a <strong>Death Check</strong> for you. As soon as someone spends a turn checking your vitals, the result is revealed. If your character’s death is imminent, make your last moments count: save someone’s life, solve an important mystery, or give the others time to escape. Enjoy the carnage, then jump back in for more!</div>    \n  </div>\n</div>\n\n<h4>Select your roll type:</h4>\n`,\n  buttons: {\n    button1: {\n      label: `Advantage`,\n      callback: () => rollCheck(`1d10 [+]`),\n      icon: `<i class=\"fas fa-angle-double-up\"></i>`\n    },\n    button2: {\n      label: `Normal`,\n      callback: () => rollCheck(`1d10`),\n      icon: `<i class=\"fas fa-minus\"></i>`\n    },\n    button3: {\n      label: `Disadvantage`,\n      callback: () => rollCheck(`1d10 [-]`),\n      icon: `<i class=\"fas fa-angle-double-down\"></i>`\n    }\n  }\n},{width: 600,height: 265}).render(true);","folder":null,"flags":{},"_stats": {"systemId":"mosh","systemVersion":"0.3.7","coreVersion":"11.300","createdTime":1685936572185,"modifiedTime":1686006479278,"lastModifiedBy":"6EeM38DJkcBWNAmw"}}
{"_id":"mnwVdmnmUYqA8hVz","name":"Gain Stress","type":"script","scope":"global","img":"modules/fvtt_mosh_1e_psg/icons/macros/gain_stress.png","command":"async function addStress(stressMod) {\n //get attribute to compare against\n curStress = game.user.character.system.other.stress.value;\n  //set new stress level\n  if (curStress + stressMod > 20) {\n    newStress = 20;\n    stressDiff = newStress - curStress;\n    saveImpact = stressMod - stressDiff;\n  } else {\n    newStress = curStress + stressMod;\n    stressDiff = newStress - curStress;\n    saveImpact = stressMod - stressDiff;\n  }\n  //create stress flavor text\n  if (game.user.character.system.class.value === 'Android') {\n    msgFlavor = `Power surges through your chest and you start to overheat.<br><br>`;\n  } else {\n    msgFlavor = `You feel tightness in your chest and start to sweat.<br><br>`;\n  }\n  //create chat variables\n  if (stressDiff > 0 && saveImpact === 0) {\n    msgOutcome = `Stress increased from <strong>${curStress}</strong> to <strong>${newStress}</strong>.`;\n  } else if (stressDiff > 0 && saveImpact > 0) {\n    msgOutcome = `You hit rock bottom. Stress increased from <strong>${curStress}</strong> to <strong>${newStress}</strong>. You must also <strong>reduce the most relevant Stat or Save by ${saveImpact}</strong>.`;\n  } else if (stressDiff === 0 && saveImpact > 0) {\n    msgOutcome = `You feel a part of yourself drift away. <strong>Reduce the most relevant Stat or Save by ${saveImpact}</strong>.`;\n  }\n  //create chat message\n  macroResult = `\n  <div class=\"mosh\">\n    <div class=\"rollcontainer\">\n      <div class=\"flexrow\" style=\"margin-bottom: 5px;\">\n        <div class=\"rollweaponh1\">STRESS GAINED</div>\n        <div style=\"text-align: right\"><img class=\"roll-image\" src=\"modules/fvtt_mosh_1e_psg/icons/macros/gain_stress.png\" /></div>\n      </div>\n      <div class=\"description\"\" style=\"margin-bottom: 20px;\">\n        <div class=\"body\">\n        ${msgFlavor} ${msgOutcome}\n        </div>\n      </div>\n    </div>\n  </div>\n  `;\n  //get speaker character\n  activeCharacter = canvas.scene.data.tokens.find(token => token.name = game.user.character.name);\n  //push chat message\n  ChatMessage.create({\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker({token: activeCharacter}),\n    content: macroResult\n  });\n  //update characters stress level\n  game.user.character.update({'system.other.stress.value': newStress});\n}\n\nasync function rollStress(rollString) {\n //translate rollString into foundry roll string format\n if (rollString.includes(\"[\") === true) {\n   //extract dice needed\n   rollDice = rollString.substr(0,rollString.indexOf(\"[\")).concat(',',rollString.substr(0,rollString.indexOf(\"[\")));\n   //make adv/dis template\n   rollAdv = '{[diceSet]}kl';\n   rollDis = '{[diceSet]}kh';\n   //make foundry roll string\n   if (rollString.includes(\"[+]\") === true) {\n  rollStringParsed = rollAdv.replace(\"[diceSet]\",rollDice);\n   } else if (rollString.includes(\"[-]\") === true) {\n  rollStringParsed = rollDis.replace(\"[diceSet]\",rollDice);\n   }\n } else {\n   rollStringParsed = rollString;\n }\n //get attribute to compare against\n curStress = game.user.character.system.other.stress.value;\n  //roll dice\n  let macroRoll = await new Roll(rollStringParsed).evaluate();\n  //set stressmod\n  stressMod = macroRoll.total;\n  //set new stress level\n  if (curStress + stressMod > 20) {\n    newStress = 20;\n    stressDiff = newStress - curStress;\n    saveImpact = stressMod - stressDiff;\n  } else {\n    newStress = curStress + stressMod;\n    stressDiff = newStress - curStress;\n    saveImpact = stressMod - stressDiff;\n  }\n  //update characters stress level\n  game.user.character.update({'system.other.stress.value': newStress});\n  //create stress flavor text\n  if (game.user.character.system.class.value === 'Android') {\n    msgFlavor = `Power surges through your chest and you start to overheat.<br><br>`;\n  } else {\n    msgFlavor = `You feel tightness in your chest and start to sweat.<br><br>`;\n  }\n  //create chat variables\n  if (stressDiff > 0 && saveImpact === 0) {\n    msgOutcome = `Stress increased from <strong>${curStress}</strong> to <strong>${newStress}</strong>.`;\n  } else if (stressDiff > 0 && saveImpact > 0) {\n    msgOutcome = `You hit rock bottom. Stress increased from <strong>${curStress}</strong> to <strong>${newStress}</strong>. You must also <strong>reduce the most relevant Stat or Save by ${saveImpact}</strong>.`;\n  } else if (stressDiff === 0 && saveImpact > 0) {\n    msgOutcome = `You feel a part of yourself drift away. <strong>Reduce the most relevant Stat or Save by ${saveImpact}</strong>.`;\n  }\n  //create chat message\n  macroResult = `\n  <div class=\"mosh\">\n    <div class=\"rollcontainer\">\n      <div class=\"flexrow\" style=\"margin-bottom: 5px;\">\n        <div class=\"rollweaponh1\">STRESS GAINED</div>\n        <div style=\"text-align: right\"><img class=\"roll-image\" src=\"modules/fvtt_mosh_1e_psg/icons/macros/gain_stress.png\" /></div>\n      </div>\n      <div class=\"description\"\" style=\"margin-bottom: 20px;\">\n        <div class=\"body\">\n        ${msgFlavor} ${msgOutcome}\n        </div>\n      </div>\n    </div>\n  </div>\n  `;\n  //make message ID\n  chatId = randomID();\n  //get speaker character\n  activeCharacter = canvas.scene.data.tokens.find(token => token.name = game.user.character.name);\n  //make message\n  macroMsg = await macroRoll.toMessage({\n    id: chatId,\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker({token: activeCharacter}),\n    content: macroResult\n  },{keepId:true});\n  //make dice\n  await game.dice3d.waitFor3DAnimationByMessageID(chatId);\n}\n\nnew Dialog({\ntitle: `Gain Stress`,\ncontent: `\n<style>\n.macro_window{\n  background: rgb(230,230,230);\n  border-radius: 9px;\n}\n.macro_img{\n  display: flex;\n  justify-content: center;\n}\n.macro_desc{\n  font-family: \"Roboto\", sans-serif;\n  font-size: 10.5pt;\n  font-weight: 400;\n  padding-top: 8px;\n  padding-right: 8px;\n  padding-bottom: 8px;\n}\n.grid-2col {\n  display: grid;\n  grid-column: span 2 / span 2;\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n  gap: 2px;\n  padding: 0;\n}\n</style>\n\n<div class =\"macro_window\" style=\"margin-bottom : 7px;\">\n<div class=\"grid grid-2col\" style=\"grid-template-columns: 150px auto\">\n  <div class=\"macro_img\"><img src=\"modules/fvtt_mosh_1e_psg/icons/macros/gain_stress.png\" style=\"border:none\"/></div>\n  <div class=\"macro_desc\"><h3>Gain Stress</h3><strong>You gain 1 Stress every time you fail a Stat Check or Save.</strong> Occasionally, certain locations or entities can automatically give you Stress from interacting with or witnessing them. Your <strong>Minimum Stress starts at 2</strong>, and the <strong>Maximum Stress you can have is 20.</strong> Any Stress you take over 20 instead reduces the most relevant Stat or Save by that amount.</div>    \n</div>\n</div>\n\n<h4>Select your modification:</h4>\n`,\nbuttons: {\n  button1: {\n  label: `Gain 1 Stress`,\n  callback: () => addStress(1),\n  icon: `<i class=\"fas fa-angle-up\"></i>`\n  },\n  button2: {\n  label: `Gain 2 Stress`,\n  callback: () => addStress(2),\n  icon: `<i class=\"fas fa-angle-double-up\"></i>`\n  },\n  button3: {\n  label: `Gain 1d5 Stress`,\n  callback: () => rollStress(`1d5`),\n  icon: `<i class=\"fas fa-arrow-circle-up\"></i>`\n  }\n}\n},{width: 600,height: 265}).render(true);","folder":null,"flags":{},"_stats": {"systemId":"mosh","systemVersion":"0.3.7","coreVersion":"11.300","createdTime":1685936572185,"modifiedTime":1686006479278,"lastModifiedBy":"6EeM38DJkcBWNAmw"}}
{"_id":"1DGm46wEuQ9B1tBs","name":"Panic Check","type":"script","scope":"global","img":"modules/fvtt_mosh_1e_psg/icons/rolltables/panic_check.png","command":"async function rollCheck(rollString) {\n //translate rollString into foundry roll string format\n if (rollString.includes(\"[\") === true) {\n   //extract dice needed\n   rollDice = rollString.substr(0,rollString.indexOf(\"[\")).concat(',',rollString.substr(0,rollString.indexOf(\"[\")));\n   //make adv/dis template\n   rollAdv = '{[diceSet]}kh';\n   rollDis = '{[diceSet]}kl';\n   //make foundry roll string\n   if (rollString.includes(\"[+]\") === true) {\n  rollStringParsed = rollAdv.replace(\"[diceSet]\",rollDice);\n   } else if (rollString.includes(\"[-]\") === true) {\n  rollStringParsed = rollDis.replace(\"[diceSet]\",rollDice);\n   }\n } else {\n   rollStringParsed = rollString;\n }\n //roll dice\n let macroRoll = await new Roll(rollStringParsed).evaluate();\n //get table result\n tableResult = game.tables.getName(\"Panic Check\").getResultsForRoll(macroRoll.total);\n //get attribute to compare against\n curStress = game.user.character.system.other.stress.value;\n //create chat message, depending on outcome\n if (macroRoll.total <= curStress) {\n  //create message variables\n  if (game.user.character.system.class.value === 'Android') {\n   msg_outcome = `\n   <div style=\"font-size: 1.1rem; margin-top : -10px; margin-bottom : 5px;\">\n    <strong>FAILURE!</strong>\n   </div>\n   You lose motor control for a moment as your sensory inputs flicker.\n   `;\n   if(macroRoll.total === 19) {tableResult[0].text = tableResult[0].text.replace(\"HEART ATTACK / SHORT CIRCUIT (ANDROIDS).\",\"SHORT CIRCUIT.\")};\n  } else {\n   msg_outcome = `\n   <div style=\"font-size: 1.1rem; margin-top : -10px; margin-bottom : 5px;\">\n    <strong>FAILURE!</strong>\n   </div>\n   Your heartbeat races out of control and you start to feel dizzy.\n   `;\n   if(macroRoll.total === 19) {tableResult[0].text = tableResult[0].text.replace(\"HEART ATTACK / SHORT CIRCUIT (ANDROIDS).\",\"HEART ATTACK.\")};\n  }\n  overUnder = `<i class=\"fas fa-angle-right\"></i>`;\n  target = curStress;\n  //create message from template\n  macroResult = `\n  <div class=\"mosh\">\n   <div class=\"rollcontainer\">\n    <div class=\"flexrow\" style=\"margin-bottom : 5px;\">\n     <div class=\"rollweaponh1\">${tableResult[0].parent.name}</div>\n     <div style=\"text-align: right\"><img class=\"roll-image\" src=\"${tableResult[0].img}\" title=\"${tableResult[0].parent.name}\" /></div>\n    </div>\n    <div class=\"description\" style=\"margin-bottom: 10px;\">\n     <div class=\"body\">${msg_outcome}</div>\n    </div>\n    <div class=\"dice-roll\" style=\"margin-bottom: 10px;\">\n     <div class=\"dice-result\">\n      <div class=\"dice-formula\">${rollString} ${overUnder} ${target}</div>\n      <h4 class=\"dice-total\">${macroRoll.total}</h4>\n     </div>\n    </div>\n    <div class=\"description\" style=\"margin-bottom: 20px;\">${tableResult[0].text}</div>\n   </div>\n  </div>\n  `;\n } else {\n  //create message variables\n  msg_outcome = `\n  <div style=\"font-size: 1.1rem; margin-top : -10px; margin-bottom : 5px;\">\n   <strong>SUCCESS!</strong>\n  </div>\n  You take a deep breath and regain your composure.\n  `;\n  overUnder = `<i class=\"fas fa-angle-right\"></i>`;\n  target = curStress;\n  //create message from template\n  macroResult = `\n  <div class=\"mosh\">\n   <div class=\"rollcontainer\">\n    <div class=\"flexrow\" style=\"margin-bottom: 5px;\">\n     <div class=\"rollweaponh1\">${tableResult[0].parent.name}</div>\n     <div style=\"text-align: right\"><img class=\"roll-image\" src=\"${tableResult[0].img}\" title=\"${tableResult[0].parent.name}\" /></div>\n    </div>\n    <div class=\"description\"\" style=\"margin-bottom: 20px;\">\n     <div class=\"body\">${msg_outcome}</div>\n    </div>\n   </div>\n  </div>\n  `;\n }\n //make message ID\n chatId = randomID();\n //get speaker character\n activeCharacter = canvas.scene.data.tokens.find(token => token.name = game.user.character.name);\n //make message\n macroMsg = await macroRoll.toMessage({\n   id: chatId,\n   user: game.user._id,\n   speaker: ChatMessage.getSpeaker({token: activeCharacter}),\n   content: macroResult\n },{keepId:true});\n //make dice\n await game.dice3d.waitFor3DAnimationByMessageID(chatId);\n  }\n  \n  new Dialog({\n title: `Panic Check`,\n content: `\n  <style>\n .macro_window{\n   background: rgb(230,230,230);\n   border-radius: 9px;\n }\n .macro_img{\n   display: flex;\n   justify-content: center;\n }\n .macro_desc{\n   font-family: \"Roboto\", sans-serif;\n   font-size: 10.5pt;\n   font-weight: 400;\n   padding-top: 8px;\n   padding-right: 8px;\n   padding-bottom: 8px;\n }\n .grid-2col {\n   display: grid;\n   grid-column: span 2 / span 2;\n   grid-template-columns: repeat(2, minmax(0, 1fr));\n   gap: 2px;\n   padding: 0;\n }\n  </style>\n  \n  <div class =\"macro_window\" style=\"margin-bottom : 7px;\">\n <div class=\"grid grid-2col\" style=\"grid-template-columns: 150px auto\">\n   <div class=\"macro_img\"><img src=\"modules/fvtt_mosh_1e_psg/icons/rolltables/panic_check.png\" style=\"border:none\"/></div>\n   <div class=\"macro_desc\"><h3>Panic Check</h3>Stress, Damage, and emotional wear and tear will eventually bring you to your breaking point. When that happens, there’s a chance you’ll Panic. You determine this by making a <strong>Panic Check</strong>. Some results of the Panic Table are so severe that they leave a lasting impression on you. These are called <strong>Conditions</strong>, and they affect you until you are able to treat them.</div>    \n </div>\n  </div>\n  \n  <h4>Select your roll type:</h4>\n  `,\n buttons: {\n   button1: {\n  label: `Advantage`,\n  callback: () => rollCheck(`1d20 [+]`),\n  icon: `<i class=\"fas fa-angle-double-up\"></i>`\n   },\n   button2: {\n  label: `Normal`,\n  callback: () => rollCheck(`1d20`),\n  icon: `<i class=\"fas fa-minus\"></i>`\n   },\n   button3: {\n  label: `Disadvantage`,\n  callback: () => rollCheck(`1d20 [-]`),\n  icon: `<i class=\"fas fa-angle-double-down\"></i>`\n   }\n }\n  },{width: 600,height: 265}).render(true);","folder":null,"flags":{},"_stats": {"systemId":"mosh","systemVersion":"0.3.7","coreVersion":"11.300","createdTime":1685936572185,"modifiedTime":1686006479278,"lastModifiedBy":"6EeM38DJkcBWNAmw"}}
{"_id":"TQgnYmLu4TdXVBr8","name":"Relieve Stress","type":"script","scope":"global","img":"modules/fvtt_mosh_1e_psg/icons/macros/relieve_stress.png","command":"async function relieveStress(stressMod) {\n //get attribute to compare against\n curStress = game.user.character.system.other.stress.value;\n  //set new stress level\n  if (curStress + stressMod < 2) {\n    newStress = 2;\n    stressDiff = newStress - curStress;\n    saveImpact = stressMod - stressDiff;\n  } else {\n    newStress = curStress + stressMod;\n    stressDiff = newStress - curStress;\n    saveImpact = stressMod - stressDiff;\n  }\n  //create stress flavor text\n  if (game.user.character.system.class.value === 'Android') {\n    msgFlavor = `You soft-reset, purging unnecessary background processes.<br><br>`;\n  } else {\n    msgFlavor = `You feel a sense of calm wash over you.<br><br>`;\n  }\n  //create chat variables\n  if (stressMod < 0 && newStress === 2 && stressDiff === 0) {\n    msgOutcome = `You are already as calm as possible.`;\n  } else {\n    msgOutcome = `Stress decreased from <strong>${curStress}</strong> to <strong>${newStress}</strong>.`;\n  }\n  //create chat message\n  macroResult = `\n  <div class=\"mosh\">\n    <div class=\"rollcontainer\">\n      <div class=\"flexrow\" style=\"margin-bottom: 5px;\">\n        <div class=\"rollweaponh1\">STRESS RELIEVED</div>\n        <div style=\"text-align: right\"><img class=\"roll-image\" src=\"modules/fvtt_mosh_1e_psg/icons/macros/relieve_stress.png\" /></div>\n      </div>\n      <div class=\"description\"\" style=\"margin-bottom: 20px;\">\n        <div class=\"body\">\n        ${msgFlavor} ${msgOutcome}\n        </div>\n      </div>\n    </div>\n  </div>\n  `;\n  //get speaker character\n  activeCharacter = canvas.scene.data.tokens.find(token => token.name = game.user.character.name);\n  //push chat message\n  ChatMessage.create({\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker({token: activeCharacter}),\n    content: macroResult\n  });\n  //update characters stress level\n  game.user.character.update({'system.other.stress.value': newStress});\n}\n\nasync function rollStress(rollString) {\n //translate rollString into foundry roll string format\n if (rollString.includes(\"[\") === true) {\n   //extract dice needed\n   rollDice = rollString.substr(0,rollString.indexOf(\"[\")).concat(',',rollString.substr(0,rollString.indexOf(\"[\")));\n   //make adv/dis template\n   rollAdv = '{[diceSet]}kl';\n   rollDis = '{[diceSet]}kh';\n   //make foundry roll string\n   if (rollString.includes(\"[+]\") === true) {\n  rollStringParsed = rollAdv.replace(\"[diceSet]\",rollDice);\n   } else if (rollString.includes(\"[-]\") === true) {\n  rollStringParsed = rollDis.replace(\"[diceSet]\",rollDice);\n   }\n } else {\n   rollStringParsed = rollString;\n }\n //get attribute to compare against\n curStress = game.user.character.system.other.stress.value;\n  //roll dice\n  let macroRoll = await new Roll(rollStringParsed).evaluate();\n  //set stressmod\n  stressMod = macroRoll.total;\n  //set new stress level\n  if (curStress + stressMod > 20) {\n    newStress = 20;\n    stressDiff = newStress - curStress;\n    saveImpact = stressMod - stressDiff;\n  } else {\n    newStress = curStress + stressMod;\n    stressDiff = newStress - curStress;\n    saveImpact = stressMod - stressDiff;\n  }\n  //update characters stress level\n  game.user.character.update({'system.other.stress.value': newStress});\n  //create stress flavor text\n  if (game.user.character.system.class.value === 'Android') {\n    msgFlavor = `You soft-reset, purging unnecessary background processes.<br><br>`;\n  } else {\n    msgFlavor = `You feel a sense of calm wash over you.<br><br>`;\n  }\n  //create chat variables\n  if (stressMod < 0 && newStress === 2 && stressDiff === 0) {\n    msgOutcome = `You are already as calm as possible.`;\n  } else {\n    msgOutcome = `Stress decreased from <strong>${curStress}</strong> to <strong>${newStress}</strong>.`;\n  }\n  //create chat message\n  macroResult = `\n  <div class=\"mosh\">\n    <div class=\"rollcontainer\">\n      <div class=\"flexrow\" style=\"margin-bottom: 5px;\">\n        <div class=\"rollweaponh1\">STRESS RELIEVED</div>\n        <div style=\"text-align: right\"><img class=\"roll-image\" src=\"modules/fvtt_mosh_1e_psg/icons/macros/relieve_stress.png\" /></div>\n      </div>\n      <div class=\"description\"\" style=\"margin-bottom: 20px;\">\n        <div class=\"body\">\n        ${msgFlavor} ${msgOutcome}\n        </div>\n      </div>\n    </div>\n  </div>\n  `;\n  //make message ID\n  chatId = randomID();\n  //get speaker character\n  activeCharacter = canvas.scene.data.tokens.find(token => token.name = game.user.character.name);\n  //make message\n  macroMsg = await macroRoll.toMessage({\n    id: chatId,\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker({token: activeCharacter}),\n    content: macroResult\n  },{keepId:true});\n  //make dice\n  await game.dice3d.waitFor3DAnimationByMessageID(chatId);\n}\n\nnew Dialog({\ntitle: `Relieve Stress`,\ncontent: `\n<style>\n.macro_window{\n  background: rgb(230,230,230);\n  border-radius: 9px;\n}\n.macro_img{\n  display: flex;\n  justify-content: center;\n}\n.macro_desc{\n  font-family: \"Roboto\", sans-serif;\n  font-size: 10.5pt;\n  font-weight: 400;\n  padding-top: 8px;\n  padding-right: 8px;\n  padding-bottom: 8px;\n}\n.grid-2col {\n  display: grid;\n  grid-column: span 2 / span 2;\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n  gap: 2px;\n  padding: 0;\n}\n</style>\n\n<div class =\"macro_window\" style=\"margin-bottom : 7px;\">\n<div class=\"grid grid-2col\" style=\"grid-template-columns: 150px auto\">\n  <div class=\"macro_img\"><img src=\"modules/fvtt_mosh_1e_psg/icons/macros/relieve_stress.png\" style=\"border:none\"/></div>\n  <div class=\"macro_desc\"><h3>Relieve Stress</h3>Occasionally, certain moments, places, or events can automatically <strong>relieve your stress.</strong> Escaping perilous situations, finding a serene location, or experiencing a touching moment with a loved one can have meaningful impacts on your mood and outlook on life. If your stress is getting close to 20, you should consider making a <strong>Rest Save</strong> - as the effects of a failed <strong>Panic Check</strong> can be devastating.</div>    \n</div>\n</div>\n\n<h4>Select your modification:</h4>\n`,\nbuttons: {\n  button1: {\n  label: `Relieve 1 Stress`,\n  callback: () => relieveStress(-1),\n  icon: `<i class=\"fas fa-angle-down\"></i>`\n  },\n  button2: {\n  label: `Relieve 2 Stress`,\n  callback: () => relieveStress(-2),\n  icon: `<i class=\"fas fa-angle-double-down\"></i>`\n  },\n  button3: {\n  label: `Relieve 1d5 Stress`,\n  callback: () => rollStress(`-1d5`),\n  icon: `<i class=\"fas fa-arrow-circle-down\"></i>`\n  }\n}\n},{width: 600,height: 265}).render(true);","folder":null,"flags":{},"_stats": {"systemId":"mosh","systemVersion":"0.3.7","coreVersion":"11.300","createdTime":1685936572185,"modifiedTime":1686006479278,"lastModifiedBy":"6EeM38DJkcBWNAmw"}}
{"_id":"OgfzhrIgmGBumxeM","name":"Rest Save","type":"script","scope":"global","img":"modules/fvtt_mosh_1e_psg/icons/macros/rest_save.png","command":"async function rollCheck(rollString) {\n  //init vars\n  rollAdvDis = rollString.includes(\"[\");\n  //translate rollString into foundry roll string format\n  if (rollAdvDis === true) {\n    //extract dice needed\n    rollDice = rollString.substr(0,rollString.indexOf(\"[\")).concat(',',rollString.substr(0,rollString.indexOf(\"[\")));\n    //make adv/dis template\n    rollTemplate = '{[diceSet]}';\n    //make foundry roll string\n    rollStringParsed = rollTemplate.replace(\"[diceSet]\",rollDice);\n  } else {\n    rollStringParsed = rollString;\n  }\n  //roll dice\n  let macroRoll = await new Roll(rollStringParsed).evaluate();\n  //assign to vars + replace 100s with 0s\n  if (rollAdvDis === true) {\n    //get values\n    rollA1 = macroRoll.dice[0].results[0].result;\n    rollB1 = macroRoll.dice[1].results[0].result;\n    //replace 10s\n    if (rollA1 === 100) {rollA1 = 0;}\n    if (rollB1 === 100) {rollB1 = 0;}\n  } else {\n    //get values\n    rollA1 = macroRoll.dice[0].results[0].result;\n    //replace 10s\n    if (rollA1 === 100) {rollA1= 0;}\n  }\n  //choose best value based on Adv/Dis\n  if (rollAdvDis === true) {\n    if (rollString.includes(\"[+]\") === true) {\n      if(rollA1 < rollB1) { \n        finalRoll = rollA1;\n      } else {\n        finalRoll = rollB1;\n      }\n    } else if (rollString.includes(\"[-]\") === true) {\n      if(rollA1 > rollB1) { \n        finalRoll = rollA1;\n      } else {\n        finalRoll = rollB1;\n      }\n    }\n  } else {\n    finalRoll = rollA1;\n  }\n //get attributes to compare against\n  curStress = game.user.character.system.other.stress.value;\n  sanitySave = game.user.character.system.stats.sanity.value + game.user.character.system.stats.sanity.mod;\n  fearSave = game.user.character.system.stats.fear.value + game.user.character.system.stats.fear.mod;\n  bodySave = game.user.character.system.stats.body.value + game.user.character.system.stats.body.mod;\n  minSave = Math.min(sanitySave, fearSave, bodySave);\n  //calculate rest result\n  onesValue = Number(String(finalRoll).charAt(String(finalRoll).length-1));\n  //prepare list of critical rolls\n  doubles = new Set([0, 11, 22, 33, 44, 55, 66, 77, 88, 99]);\n  //check for crit\n  if (doubles.has(finalRoll) === true) {\n    critical = \"CRITICAL \";\n  } else {\n    critical = \"\";\n  }\n  //set result variables\n  if (finalRoll >= 90) {\n    outcome = \"FAILURE\";\n    change = \"increased\";\n    type = \"Gained\";\n  } else if (finalRoll < minSave) {\n    outcome = \"SUCCESS\";\n    change = \"decreased\";\n    type = \"Relieved\";\n  } else {\n    outcome = \"FAILURE\";\n    change = \"increased\";\n    type = \"Gained\";\n  }\n  //set stress mod\n  if (critical === \"CRITICAL \" && outcome === \"SUCCESS\") {\n    stressMod = -2*onesValue;\n  } else if (critical === \"\" && outcome === \"SUCCESS\") {\n    stressMod = -1*onesValue;\n  } else {\n    stressMod = 1;\n  }\n  //set new stress level\n  if (curStress + stressMod > 20) {\n    newStress = 20;\n    stressDiff = newStress - curStress;\n    saveImpact = stressMod - stressDiff;\n  } else if (curStress + stressMod < 2) {\n    newStress = 2;\n    stressDiff = newStress - curStress;\n    saveImpact = stressMod - stressDiff;\n  } else {\n    newStress = curStress + stressMod;\n    stressDiff = newStress - curStress;\n    saveImpact = stressMod - stressDiff;\n  }\n  //set header\n  if (stressMod === 0 || stressDiff === 0) {\n    msgHeader = `Stress Unchanged`;\n  } else {\n    msgHeader = `Stress ${type}`;\n  }\n  //update characters stress level\n  game.user.character.update({'system.other.stress.value': newStress});\n  //create stress flavor text\n  if (game.user.character.system.class.value === 'Android') {\n    if (outcome === \"FAILURE\") {\n      msgFlavor = `\n      <div style=\"font-size: 1.1rem; margin-top : -10px; margin-bottom : 5px;\">\n     <strong>${critical}${outcome}!</strong>\n    </div>\n    Power surges through your chest and you start to overheat.<br>\n      `;\n    } else {\n      msgFlavor = `\n      <div style=\"font-size: 1.1rem; margin-top : -10px; margin-bottom : 5px;\">\n        <strong>${critical}${outcome}!</strong>\n      </div>\n      You soft-reset, purging unnecessary background processes.<br>\n      `;\n    }\n  } else {\n    if (outcome === \"FAILURE\") {\n      msgFlavor = `\n      <div style=\"font-size: 1.1rem; margin-top : -10px; margin-bottom : 5px;\">\n     <strong>${critical}${outcome}!</strong>\n    </div>\n      You feel tightness in your chest and start to sweat.<br>\n      `;\n    } else {\n      msgFlavor = `\n      <div style=\"font-size: 1.1rem; margin-top : -10px; margin-bottom : 5px;\">\n     <strong>${critical}${outcome}!</strong>\n    </div>\n      You feel a sense of calm wash over you.<br>\n      `;\n    }\n  }\n  //create chat variables\n  if (stressMod === 0) {\n    msgOutcome = `Frustratingly, you can't seem to relax. You still have a stress of <strong>${newStress}</strong>.`;\n  } else if (stressMod < 0 && newStress === 2 && stressDiff === 0) {\n    msgOutcome = `You are already as calm as possible.`;\n  } else if (stressMod > 0 && curStress < 20 && newStress === 20 && saveImpact > 0) {\n    msgOutcome = `You hit rock bottom. Stress increased from <strong>${curStress}</strong> to <strong>${newStress}</strong>. You must also <strong>reduce the most relevant Stat or Save by ${saveImpact}</strong>.`;\n  } else if (stressMod > 0 && curStress === 20 && newStress === 20 && saveImpact > 0) {\n    msgOutcome = `You feel a part of yourself drift away. <strong>Reduce the most relevant Stat or Save by ${saveImpact}</strong>.`;\n  } else {\n    msgOutcome = `Stress ${change} from <strong>${curStress}</strong> to <strong>${newStress}</strong>.`;\n  }\n  //create message if crit fail\n  if (critical === \"CRITICAL \" && outcome === \"FAILURE\") {\n    results_critfail = `<br><br>@Macro[Panic Check]{Make a Panic Check}`;\n  } else {\n    results_critfail = ``;\n  }\n  //set roll info\n  overUnder = `<i class=\"fas fa-angle-left\"></i>`;\n  target = minSave;\n  //create message from template\n  macroResult = `\n  <div class=\"mosh\">\n    <div class=\"rollcontainer\">\n      <div class=\"flexrow\" style=\"margin-bottom : 5px;\">\n        <div class=\"rollweaponh1\">${msgHeader}</div>\n        <div style=\"text-align: right\"><img class=\"roll-image\" src=\"modules/fvtt_mosh_1e_psg/icons/macros/rest_save.png\" /></div>\n      </div>\n      <div class=\"description\" style=\"margin-bottom: 10px;\">\n        <div class=\"body\">${msgFlavor}</div>\n      </div>\n      <div class=\"dice-roll\" style=\"margin-bottom: 10px;\">\n        <div class=\"dice-result\">\n          <div class=\"dice-formula\">${rollString} ${overUnder} ${target}</div>\n          <h4 class=\"dice-total\">${finalRoll}</h4>\n        </div>\n      </div>\n      <div class=\"description\" style=\"margin-bottom: 20px;\">${msgOutcome}${results_critfail}</div>\n    </div>\n  </div>\n  `;\n  //chat id\n chatId = randomID();\n  //get speaker character\n  activeCharacter = canvas.scene.data.tokens.find(token => token.name = game.user.character.name);\n //make message\n macroMsg = await macroRoll.toMessage({\n   id: chatId,\n   user: game.user._id,\n   speaker: ChatMessage.getSpeaker({token: activeCharacter}),\n   content: macroResult\n },{keepId:true});\n //make dice\n await game.dice3d.waitFor3DAnimationByMessageID(chatId);\n}\n  \n  new Dialog({\n title: `Rest Save`,\n content: `\n  <style>\n .macro_window{\n   background: rgb(230,230,230);\n   border-radius: 9px;\n }\n .macro_img{\n   display: flex;\n   justify-content: center;\n }\n .macro_desc{\n   font-family: \"Roboto\", sans-serif;\n   font-size: 10.5pt;\n   font-weight: 400;\n   padding-top: 8px;\n   padding-right: 8px;\n   padding-bottom: 8px;\n }\n .grid-2col {\n   display: grid;\n   grid-column: span 2 / span 2;\n   grid-template-columns: repeat(2, minmax(0, 1fr));\n   gap: 2px;\n   padding: 0;\n }\n  </style>\n  \n  <div class =\"macro_window\" style=\"margin-bottom : 7px;\">\n <div class=\"grid grid-2col\" style=\"grid-template-columns: 150px auto\">\n   <div class=\"macro_img\"><img src=\"modules/fvtt_mosh_1e_psg/icons/macros/rest_save.png\" style=\"border:none\"/></div>\n   <div class=\"macro_desc\"><h3>Rest Save</h3>You can relieve Stress by resting in a relatively safe place. If you succeed, reduce your Stress; <strong>if you fail, you gain 1 Stress instead.</strong> Players can gain Advantage on their Rest Save by participating in consensual sex, recreational drug use, a night of heavy drinking, prayer, or any other suitable leisure activity. Unsafe locations may incur Disadvantage.</div>\n </div>\n  </div>\n  \n  <h4>Select your roll type:</h4>\n  `,\n buttons: {\n   button1: {\n  label: `Advantage`,\n  callback: () => rollCheck(`1d100 [+]`),\n  icon: `<i class=\"fas fa-angle-double-up\"></i>`\n   },\n   button2: {\n  label: `Normal`,\n  callback: () => rollCheck(`1d100`),\n  icon: `<i class=\"fas fa-minus\"></i>`\n   },\n   button3: {\n  label: `Disadvantage`,\n  callback: () => rollCheck(`1d100 [-]`),\n  icon: `<i class=\"fas fa-angle-double-down\"></i>`\n   }\n }\n  },{width: 600,height: 265}).render(true);","folder":null,"flags":{},"_stats": {"systemId":"mosh","systemVersion":"0.3.7","coreVersion":"11.300","createdTime":1685936572185,"modifiedTime":1686006479278,"lastModifiedBy":"6EeM38DJkcBWNAmw"}}
{"_id":"HEeTHAf4mJZMsGrf","name":"Save","type":"script","scope":"global","img":"modules/fvtt_mosh_1e_psg/icons/macros/save.png","command":"async function rollCheck(addSkill,addPoints,rollSave,rollString) {\n  //init vars\n  rollAdvDis = rollString.includes(\"[\");\n  //translate rollString into foundry roll string format\n  if (rollAdvDis === true) {\n    //extract dice needed\n    rollDice = rollString.substr(0,rollString.indexOf(\"[\")).concat(',',rollString.substr(0,rollString.indexOf(\"[\")));\n    //make adv/dis template\n    rollTemplate = '{[diceSet]}';\n    //make foundry roll string\n    rollStringParsed = rollTemplate.replace(\"[diceSet]\",rollDice);\n  } else {\n    rollStringParsed = rollString;\n  }\n  //roll dice\n  let macroRoll = await new Roll(rollStringParsed).evaluate();\n  //assign to vars + replace 100s with 0s\n  if (rollAdvDis === true) {\n    //get values\n    rollA1 = macroRoll.dice[0].results[0].result;\n    rollB1 = macroRoll.dice[1].results[0].result;\n    //replace 10s\n    if (rollA1 === 100) {rollA1 = 0;}\n    if (rollB1 === 100) {rollB1 = 0;}\n  } else {\n    //get values\n    rollA1 = macroRoll.dice[0].results[0].result;\n    //replace 10s\n    if (rollA1 === 100) {rollA1= 0;}\n  }\n  //choose best value based on Adv/Dis\n  if (rollAdvDis === true) {\n    if (rollString.includes(\"[+]\") === true) {\n      if(rollA1 < rollB1) { \n        finalRoll = rollA1;\n      } else {\n        finalRoll = rollB1;\n      }\n    } else if (rollString.includes(\"[-]\") === true) {\n      if(rollA1 > rollB1) { \n        finalRoll = rollA1;\n      } else {\n        finalRoll = rollB1;\n      }\n    }\n  } else {\n    finalRoll = rollA1;\n  }\n  //get stress\n  curStress = game.user.character.system.other.stress.value;\n  //get the value for the chosen stat\n  if (rollSave === `sanity`) {\n    saveName = `Sanity`\n    msgHeader = rollSave + ` save`;\n    saveValue = game.user.character.system.stats.sanity.value + game.user.character.system.stats.sanity.mod;\n  } else if (rollSave === `fear`) {\n    saveName = `Fear Save`\n    msgHeader = rollSave + ` save`;\n    saveValue = game.user.character.system.stats.fear.value + game.user.character.system.stats.fear.mod;\n  } else if (rollSave === `body`) {\n    saveName = `Body`\n    msgHeader = rollSave + ` save`;\n    saveValue = game.user.character.system.stats.body.value + game.user.character.system.stats.body.mod;\n  }\n  //set addPoints to zero if null\n  if(addPoints === undefined) {addPoints = 0}\n  //set roll info\n  overUnder = `<i class=\"fas fa-angle-left\"></i>`;\n  target = saveValue + Number(addPoints);\n  //prepare list of critical rolls\n  doubles = new Set([0, 11, 22, 33, 44, 55, 66, 77, 88, 99]);\n  //check for crit\n  if (doubles.has(finalRoll) === true) {\n    critical = \"CRITICAL \";\n  } else {\n    critical = \"\";\n  }\n  //set result variables\n  if (finalRoll >= 90) {\n    outcome = \"FAILURE\";\n    position = 'higher';\n  } else if (finalRoll < target) {\n    outcome = \"SUCCESS\";\n    position = 'lower';\n  } else {\n    outcome = \"FAILURE\";\n    position = 'higher';\n  }\n  //set stress mod\n  if (outcome === \"FAILURE\") {\n    stressMod = 1;\n  } else {\n    stressMod = 0;\n  }\n  //set new stress level\n  if (curStress + stressMod > 20) {\n    newStress = 20;\n    stressDiff = newStress - curStress;\n    saveImpact = stressMod - stressDiff;\n  } else if (curStress + stressMod < 2) {\n    newStress = 2;\n    stressDiff = newStress - curStress;\n    saveImpact = stressMod - stressDiff;\n  } else {\n    newStress = curStress + stressMod;\n    stressDiff = newStress - curStress;\n    saveImpact = stressMod - stressDiff;\n  }\n  //update characters stress level\n  game.user.character.update({'system.other.stress.value': newStress});\n  //create stress flavor text\n  if (addPoints > 0) {\n    msgFlavor = `\n    <div style=\"font-size: 1.1rem; margin-top : -10px; margin-bottom : 5px;\">\n      <strong>${critical}${outcome}!</strong>\n    </div>\n    You rolled ${position} than your <strong>${saveName}</strong> plus <strong>${addSkill}</strong> skill bonus.<br>\n    `;\n  } else {\n    msgFlavor = `\n    <div style=\"font-size: 1.1rem; margin-top : -10px; margin-bottom : 5px;\">\n      <strong>${critical}${outcome}!</strong>\n    </div>\n    You rolled ${position} than your <strong>${saveName}</strong>.<br>\n    `;\n  }\n  //create chat variables\n  if (outcome === \"SUCCESS\") {\n    msgOutcome = `You gain some confidence in your skills.`;    \n  } else if (outcome === \"FAILURE\" && stressMod > 0 && curStress < 20 && newStress === 20 && saveImpact > 0) {\n    msgOutcome = `You hit rock bottom. Stress increased from <strong>${curStress}</strong> to <strong>${newStress}</strong>. You must also <strong>reduce the most relevant Stat or Save by ${saveImpact}</strong>.`;\n  } else if (outcome === \"FAILURE\" && stressMod > 0 && curStress === 20 && newStress === 20 && saveImpact > 0) {\n    msgOutcome = `You feel a part of yourself drift away. <strong>Reduce the most relevant Stat or Save by ${saveImpact}</strong>.`;\n  } else {\n    msgOutcome = `Stress increased from <strong>${curStress}</strong> to <strong>${newStress}</strong>.`;\n  }\n  //create message if crit fail\n  if (critical === \"CRITICAL \" && outcome === \"FAILURE\") {\n    results_critfail = `<br><br>@Macro[Panic Check]{Make a Panic Check}`;\n  } else {\n    results_critfail = ``;\n  }\n  //create chat message template\n  macroResult = `\n  <div class=\"mosh\">\n    <div class=\"rollcontainer\">\n      <div class=\"flexrow\" style=\"margin-bottom : 5px;\">\n        <div class=\"rollweaponh1\">${msgHeader}</div>\n        <div style=\"text-align: right\"><img class=\"roll-image\" src=\"modules/fvtt_mosh_1e_psg/icons/attributes/${rollSave}.png\" /></div>\n      </div>\n      <div class=\"description\" style=\"margin-bottom: 10px;\">\n      <div class=\"body\">${msgFlavor}</div>\n    </div>\n    <div class=\"dice-roll\" style=\"margin-bottom: 10px;\">\n      <div class=\"dice-result\">\n        <div class=\"dice-formula\">${rollString} ${overUnder} ${target}</div>\n        <h4 class=\"dice-total\">${finalRoll}</h4>\n      </div>\n    </div>\n    <div class=\"description\" style=\"margin-bottom: 20px;\">${msgOutcome}${results_critfail}</div>\n    </div>\n  </div>\n  `;\n  //make message ID\n  chatId = randomID();\n  //get speaker character\n  activeCharacter = canvas.scene.data.tokens.find(token => token.name = game.user.character.name);\n  //make message\n  macroMsg = await macroRoll.toMessage({\n    id: chatId,\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker({token: activeCharacter}),\n    content: macroResult\n  },{keepId:true});\n  //make dice\n  await game.dice3d.waitFor3DAnimationByMessageID(chatId);\n}\n  \nfunction addSkill(rollSave) {\n  //get list of player skills\n  playerItems = game.user.character.items;\n  //create header for skill list\n  skillHeader = `\n  <style>\n    .macro_window{\n      background: rgb(230,230,230);\n      border-radius: 9px;\n    }\n    .macro_img{\n      display: flex;\n      justify-content: center; //do I need this\n    }\n    .macro_desc{\n      font-family: \"Roboto\", sans-serif;\n      font-size: 10.5pt;\n      font-weight: 400;\n      padding-left: 8px;\n      padding-top: 8px;\n      padding-right: 8px;\n      padding-bottom: 8px;\n    }\n    .grid-2col {\n      display: grid;\n      grid-column: span 2 / span 2;\n      grid-template-columns: repeat(2, minmax(0, 1fr));\n      gap: 2px;\n      padding: 0;\n    }\n  </style>\n  \n  <div class =\"macro_window\" style=\"margin-bottom : 7px;\">\n      <div class=\"macro_desc\"><h3>Add a Skill?</h3>If you have a Skill that is relevant to the task at hand, you can add the Skill’s bonus to your Stat or Save before making your roll <em>(giving you a higher number to roll under)</em>.</div>    \n  </div>`;\n  //create footer for skill list\n  skillFooter = `<h4>Select your roll type:</h4>`;\n  //create template for skill row\n  skillRow = `\n  <label for=\"[RADIO_ID]\">\n    <div class =\"macro_window\" style=\"margin-bottom : 7px; vertical-align: middle; padding-left: 3px;\">\n      <div class=\"grid grid-3col\" style=\"grid-template-columns: 20px 60px auto\">\n        <input type=\"radio\" id=\"[RADIO_ID]\" name=\"skill\" value=\"[RADIO_VALUE]\">\n        <div class=\"macro_img\" style=\"padding-top: 5px; padding-left: 0px; padding-right: 0px; padding-bottom: 5px;\"><img src=\"[RADIO_IMG]\" style=\"border:none\"/></div>\n        <div class=\"macro_desc\" style=\"display: table;\">\n          <span style=\"display: table-cell; vertical-align: middle;\">\n            [RADIO_DESC]\n          </span>\n        </div>    \n      </div>\n    </div>\n  </label>`;\n  //create skillList string\n  skillList = ``;\n  //create skill counter\n  skillCount = 0;\n  //create dialog pixel counter\n  dialogHeight = 192;\n  //loop through and create skill rows\n  for (item of playerItems) {\n    //check if this is a skill\n    if (item.type === \"skill\") {\n      //set temprow as template\n      tempRow = skillRow;\n      //replace ID\n      tempRow = tempRow.replaceAll(\"[RADIO_ID]\",item.name);\n      //replace value\n      tempRow = tempRow.replace(\"[RADIO_VALUE]\",item.system.bonus);\n      //replace img\n      tempRow = tempRow.replace(\"[RADIO_IMG]\",item.img);\n      //replace desc\n      tempRow = tempRow.replace(\"[RADIO_DESC]\",item.system.description.replace(\"<p>\",\"<p><strong>\"+item.name+\":</strong> \"));\n      //add to skillList\n      skillList = skillList + tempRow;\n      //increment skill count\n      skillCount++;\n      //increment pixel counter\n      dialogHeight = dialogHeight + 77;\n    }\n  } \n  //make content string\n  skillHtml = skillHeader + skillList + skillFooter;\n  //bring up new dialog asking about adding skills\n  new Dialog({\n    title: `Stat Check`,\n    content: skillHtml,\n    buttons: {\n      button1: {\n        label: `Advantage`,\n        callback: (html) => rollCheck(html.find(\"input[name='skill']:checked\").attr(\"id\"),html.find(\"input[name='skill']:checked\").attr(\"value\"),rollSave,`1d100 [+]`),\n        icon: `<i class=\"fas fa-angle-double-up\"></i>`\n      },\n      button2: {\n        label: `Normal`,\n        callback: (html) => rollCheck(html.find(\"input[name='skill']:checked\").attr(\"id\"),html.find(\"input[name='skill']:checked\").attr(\"value\"),rollSave,`1d100`),\n        icon: `<i class=\"fas fa-minus\"></i>`\n      },\n      button3: {\n        label: `Disadvantage`,\n        callback: (html) => rollCheck(html.find(\"input[name='skill']:checked\").attr(\"id\"),html.find(\"input[name='skill']:checked\").attr(\"value\"),rollSave,`1d100 [-]`),\n        icon: `<i class=\"fas fa-angle-double-down\"></i>`\n      }\n    }\n  },{width: 600,height: dialogHeight}).render(true);\n}\n\nnew Dialog({\n  title: `Save`,\n  content: `\n  <style>\n    .macro_window{\n      background: rgb(230,230,230);\n      border-radius: 9px;\n    }\n    .macro_img{\n      display: flex;\n      justify-content: center; //do I need this\n    }\n    .macro_desc{\n      font-family: \"Roboto\", sans-serif;\n      font-size: 10.5pt;\n      font-weight: 400;\n      padding-top: 8px;\n      padding-right: 8px;\n      padding-bottom: 8px;\n    }\n    .grid-2col {\n      display: grid;\n      grid-column: span 2 / span 2;\n      grid-template-columns: repeat(2, minmax(0, 1fr));\n      gap: 2px;\n      padding: 0;\n    }\n  </style>\n  \n  <div class =\"macro_window\" style=\"margin-bottom : 7px;\">\n    <div class=\"grid grid-2col\" style=\"grid-template-columns: 150px auto\">\n      <div class=\"macro_img\"><img src=\"modules/fvtt_mosh_1e_psg/icons/macros/save.png\" style=\"border:none\"/></div>\n      <div class=\"macro_desc\"><h3>Save</h3>You have three Saves which represent your ability to withstand different kinds of trauma. In order to avoid certain dangers, you sometimes need to roll a Save. <strong>If you roll less than your Save you succeed. Otherwise you fail, and gain 1 Stress.</strong> A roll of 90-99 is always a failure. A Critical Failure means something bad happens, and furthermore you must make a Panic Check.</div>    \n    </div>\n  </div>\n  <label for=\"san\">\n    <div class =\"macro_window\" style=\"margin-bottom : 7px; vertical-align: middle; padding-left: 3px;\">\n      <div class=\"grid grid-3col\" style=\"grid-template-columns: 20px 60px auto\">\n        <input type=\"radio\" id=\"san\" name=\"save\" value=\"sanity\" checked=\"checked\">\n        <div class=\"macro_img\" style=\"padding-top: 5px; padding-left: 0px; padding-right: 0px; padding-bottom: 5px;\"><img src=\"modules/fvtt_mosh_1e_psg/icons/attributes/sanity.png\" style=\"border:none\"/></div>\n        <div class=\"macro_desc\" style=\"display: table;\">\n          <span style=\"display: table-cell; vertical-align: middle;\">\n            <strong>Sanity:</strong> Rationalize logical inconsistencies in the universe, make sense out of chaos, detect illusions and mimicry, cope with Stress.\n          </span>\n        </div>    \n      </div>\n    </div>\n  </label>\n  <label for=\"fer\">\n    <div class =\"macro_window\" style=\"margin-bottom : 7px; vertical-align: middle; padding-left: 3px;\">\n      <div class=\"grid grid-3col\" style=\"grid-template-columns: 20px 60px auto\">\n        <input type=\"radio\" id=\"fer\" name=\"save\" value=\"fear\">\n        <div class=\"macro_img\" style=\"padding-top: 5px; padding-left: 0px; padding-right: 0px; padding-bottom: 5px;\"><img src=\"modules/fvtt_mosh_1e_psg/icons/attributes/fear.png\" style=\"border:none\"/></div>\n        <div class=\"macro_desc\" style=\"display: table;\">\n          <span style=\"display: table-cell; vertical-align: middle;\">\n            <strong>Fear:</strong> Maintain a level head while struggling with fear, loneliness, depression, and other emotional surges.\n          </span>\n        </div>    \n      </div>\n    </div>\n  </label>\n  <label for=\"bod\">\n    <div class =\"macro_window\" style=\"margin-bottom : 7px; vertical-align: middle; padding-left: 3px;\">\n      <div class=\"grid grid-3col\" style=\"grid-template-columns: 20px 60px auto\">\n        <input type=\"radio\" id=\"bod\" name=\"save\" value=\"body\">\n        <div class=\"macro_img\" style=\"padding-top: 5px; padding-left: 0px; padding-right: 0px; padding-bottom: 5px;\"><img src=\"modules/fvtt_mosh_1e_psg/icons/attributes/body.png\" style=\"border:none\"/></div>\n        <div class=\"macro_desc\" style=\"display: table;\">\n          <span style=\"display: table-cell; vertical-align: middle;\">\n            <strong>Body:</strong> Employ quick reflexes and resist hunger, disease, or organisms that might try and invade your insides.\n          </span>\n        </div>\n      </div>\n    </div>\n  </label>\n  `,\n  buttons: {\n    button1: {\n      label: `Next`,\n      callback: (html) => addSkill(html.find(\"input[name='save']:checked\").val()),\n      icon: `<i class=\"fas fa-chevron-circle-right\"></i>`\n    }\n  }\n},{width: 600,height: 470}).render(true);","folder":null,"flags":{},"_stats": {"systemId":"mosh","systemVersion":"0.3.7","coreVersion":"11.300","createdTime":1685936572185,"modifiedTime":1686006479278,"lastModifiedBy":"6EeM38DJkcBWNAmw"}}
{"_id":"i54hHLMpKnCaCe9a","name":"Stat Check","type":"script","scope":"global","img":"modules/fvtt_mosh_1e_psg/icons/macros/stat_check.png","command":"async function rollCheck(addSkill,addPoints,rollStat,rollString) {\n  //init vars\n  rollAdvDis = rollString.includes(\"[\");\n  //translate rollString into foundry roll string format\n  if (rollAdvDis === true) {\n    //extract dice needed\n    rollDice = rollString.substr(0,rollString.indexOf(\"[\")).concat(',',rollString.substr(0,rollString.indexOf(\"[\")));\n    //make adv/dis template\n    rollTemplate = '{[diceSet]}';\n    //make foundry roll string\n    rollStringParsed = rollTemplate.replace(\"[diceSet]\",rollDice);\n  } else {\n    rollStringParsed = rollString;\n  }\n  //roll dice\n  let macroRoll = await new Roll(rollStringParsed).evaluate();\n  //assign to vars + replace 100s with 0s\n  if (rollAdvDis === true) {\n    //get values\n    rollA1 = macroRoll.dice[0].results[0].result;\n    rollB1 = macroRoll.dice[1].results[0].result;\n    //replace 10s\n    if (rollA1 === 100) {rollA1 = 0;}\n    if (rollB1 === 100) {rollB1 = 0;}\n  } else {\n    //get values\n    rollA1 = macroRoll.dice[0].results[0].result;\n    //replace 10s\n    if (rollA1 === 100) {rollA1= 0;}\n  }\n  //choose best value based on Adv/Dis\n  if (rollAdvDis === true) {\n    if (rollString.includes(\"[+]\") === true) {\n      if(rollA1 < rollB1) { \n        finalRoll = rollA1;\n      } else {\n        finalRoll = rollB1;\n      }\n    } else if (rollString.includes(\"[-]\") === true) {\n      if(rollA1 > rollB1) { \n        finalRoll = rollA1;\n      } else {\n        finalRoll = rollB1;\n      }\n    }\n  } else {\n    finalRoll = rollA1;\n  }\n  //get stress\n  curStress = game.user.character.system.other.stress.value;\n  //get the value for the chosen stat\n  if (rollStat === `strength`) {\n    statName = `Strength`\n    msgHeader = rollStat + ` check`;\n    statValue = game.user.character.system.stats.strength.value + game.user.character.system.stats.strength.mod;\n  } else if (rollStat === `speed`) {\n    statName = `Speed`\n    msgHeader = rollStat + ` check`;\n    statValue = game.user.character.system.stats.speed.value + game.user.character.system.stats.speed.mod;\n  } else if (rollStat === `intellect`) {\n    statName = `Intellect`\n    msgHeader = rollStat + ` check`;\n    statValue = game.user.character.system.stats.intellect.value + game.user.character.system.stats.intellect.mod;\n  } else if (rollStat === `combat`) {\n    statName = `Combat`\n    msgHeader = rollStat + ` check`;\n    statValue = game.user.character.system.stats.combat.value + game.user.character.system.stats.combat.mod;\n  }\n  //set addPoints to zero if null\n  if(addPoints === undefined) {addPoints = 0}\n  //set roll info\n  overUnder = `<i class=\"fas fa-angle-left\"></i>`;\n  target = statValue + Number(addPoints);\n  //prepare list of critical rolls\n  doubles = new Set([0, 11, 22, 33, 44, 55, 66, 77, 88, 99]);\n  //check for crit\n  if (doubles.has(finalRoll) === true) {\n    critical = \"CRITICAL \";\n  } else {\n    critical = \"\";\n  }\n  //set result variables\n  if (finalRoll >= 90) {\n    outcome = \"FAILURE\";\n    position = 'higher';\n  } else if (finalRoll < target) {\n    outcome = \"SUCCESS\";\n    position = 'lower';\n  } else {\n    outcome = \"FAILURE\";\n    position = 'higher';\n  }\n  //set stress mod\n  if (outcome === \"FAILURE\") {\n    stressMod = 1;\n  } else {\n    stressMod = 0;\n  }\n  //set new stress level\n  if (curStress + stressMod > 20) {\n    newStress = 20;\n    stressDiff = newStress - curStress;\n    saveImpact = stressMod - stressDiff;\n  } else if (curStress + stressMod < 2) {\n    newStress = 2;\n    stressDiff = newStress - curStress;\n    saveImpact = stressMod - stressDiff;\n  } else {\n    newStress = curStress + stressMod;\n    stressDiff = newStress - curStress;\n    saveImpact = stressMod - stressDiff;\n  }\n  //update characters stress level\n  game.user.character.update({'system.other.stress.value': newStress});\n  //create stress flavor text\n  if (addPoints > 0) {\n    msgFlavor = `\n    <div style=\"font-size: 1.1rem; margin-top : -10px; margin-bottom : 5px;\">\n      <strong>${critical}${outcome}!</strong>\n    </div>\n    You rolled ${position} than your <strong>${statName}</strong> plus <strong>${addSkill}</strong> skill bonus.<br>\n    `;\n  } else {\n    msgFlavor = `\n    <div style=\"font-size: 1.1rem; margin-top : -10px; margin-bottom : 5px;\">\n      <strong>${critical}${outcome}!</strong>\n    </div>\n    You rolled ${position} than your <strong>${statName}</strong>.<br>\n    `;\n  }\n  //create chat variables\n  if (outcome === \"SUCCESS\") {\n    msgOutcome = `You gain some confidence in your skills.`;    \n  } else if (outcome === \"FAILURE\" && stressMod > 0 && curStress < 20 && newStress === 20 && saveImpact > 0) {\n    msgOutcome = `You hit rock bottom. Stress increased from <strong>${curStress}</strong> to <strong>${newStress}</strong>. You must also <strong>reduce the most relevant Stat or Save by ${saveImpact}</strong>.`;\n  } else if (outcome === \"FAILURE\" && stressMod > 0 && curStress === 20 && newStress === 20 && saveImpact > 0) {\n    msgOutcome = `You feel a part of yourself drift away. <strong>Reduce the most relevant Stat or Save by ${saveImpact}</strong>.`;\n  } else {\n    msgOutcome = `Stress increased from <strong>${curStress}</strong> to <strong>${newStress}</strong>.`;\n  }\n  //create message if crit fail\n  if (critical === \"CRITICAL \" && outcome === \"FAILURE\") {\n    results_critfail = `<br><br>@Macro[Panic Check]{Make a Panic Check}`;\n  } else {\n    results_critfail = ``;\n  }\n  //create chat message template\n  macroResult = `\n  <div class=\"mosh\">\n    <div class=\"rollcontainer\">\n      <div class=\"flexrow\" style=\"margin-bottom : 5px;\">\n        <div class=\"rollweaponh1\">${msgHeader}</div>\n        <div style=\"text-align: right\"><img class=\"roll-image\" src=\"modules/fvtt_mosh_1e_psg/icons/attributes/${rollStat}.png\" /></div>\n      </div>\n      <div class=\"description\" style=\"margin-bottom: 10px;\">\n      <div class=\"body\">${msgFlavor}</div>\n    </div>\n    <div class=\"dice-roll\" style=\"margin-bottom: 10px;\">\n      <div class=\"dice-result\">\n        <div class=\"dice-formula\">${rollString} ${overUnder} ${target}</div>\n        <h4 class=\"dice-total\">${finalRoll}</h4>\n      </div>\n    </div>\n    <div class=\"description\" style=\"margin-bottom: 20px;\">${msgOutcome}${results_critfail}</div>\n    </div>\n  </div>\n  `;\n  //make message ID\n  chatId = randomID();\n  //get speaker character\n  activeCharacter = canvas.scene.data.tokens.find(token => token.name = game.user.character.name);\n  //make message\n  macroMsg = await macroRoll.toMessage({\n    id: chatId,\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker({token: activeCharacter}),\n    content: macroResult\n  },{keepId:true});\n  //make dice\n  await game.dice3d.waitFor3DAnimationByMessageID(chatId);\n}\n  \nfunction addSkill(rollStat) {\n  //get list of player skills\n  playerItems = game.user.character.items;\n  //create header for skill list\n  skillHeader = `\n  <style>\n    .macro_window{\n      background: rgb(230,230,230);\n      border-radius: 9px;\n    }\n    .macro_img{\n      display: flex;\n      justify-content: center; //do I need this\n    }\n    .macro_desc{\n      font-family: \"Roboto\", sans-serif;\n      font-size: 10.5pt;\n      font-weight: 400;\n      padding-left: 8px;\n      padding-top: 8px;\n      padding-right: 8px;\n      padding-bottom: 8px;\n    }\n    .grid-2col {\n      display: grid;\n      grid-column: span 2 / span 2;\n      grid-template-columns: repeat(2, minmax(0, 1fr));\n      gap: 2px;\n      padding: 0;\n    }\n  </style>\n  \n  <div class =\"macro_window\" style=\"margin-bottom : 7px;\">\n      <div class=\"macro_desc\"><h3>Add a Skill?</h3>If you have a Skill that is relevant to the task at hand, you can add the Skill’s bonus to your Stat or Save before making your roll <em>(giving you a higher number to roll under)</em>.</div>    \n  </div>`;\n  //create footer for skill list\n  skillFooter = `<h4>Select your roll type:</h4>`;\n  //create template for skill row\n  skillRow = `\n  <label for=\"[RADIO_ID]\">\n    <div class =\"macro_window\" style=\"margin-bottom : 7px; vertical-align: middle; padding-left: 3px;\">\n      <div class=\"grid grid-3col\" style=\"grid-template-columns: 20px 60px auto\">\n        <input type=\"radio\" id=\"[RADIO_ID]\" name=\"skill\" value=\"[RADIO_VALUE]\">\n        <div class=\"macro_img\" style=\"padding-top: 5px; padding-left: 0px; padding-right: 0px; padding-bottom: 5px;\"><img src=\"[RADIO_IMG]\" style=\"border:none\"/></div>\n        <div class=\"macro_desc\" style=\"display: table;\">\n          <span style=\"display: table-cell; vertical-align: middle;\">\n            [RADIO_DESC]\n          </span>\n        </div>    \n      </div>\n    </div>\n  </label>`;\n  //create skillList string\n  skillList = ``;\n  //create skill counter\n  skillCount = 0;\n  //create dialog pixel counter\n  dialogHeight = 192;\n  //loop through and create skill rows\n  for (item of playerItems) {\n    //check if this is a skill\n    if (item.type === \"skill\") {\n      //set temprow as template\n      tempRow = skillRow;\n      //replace ID\n      tempRow = tempRow.replaceAll(\"[RADIO_ID]\",item.name);\n      //replace value\n      tempRow = tempRow.replace(\"[RADIO_VALUE]\",item.system.bonus);\n      //replace img\n      tempRow = tempRow.replace(\"[RADIO_IMG]\",item.img);\n      //replace desc\n      tempRow = tempRow.replace(\"[RADIO_DESC]\",item.system.description.replace(\"<p>\",\"<p><strong>\"+item.name+\":</strong> \"));\n      //add to skillList\n      skillList = skillList + tempRow;\n      //increment skill count\n      skillCount++;\n      //increment pixel counter\n      dialogHeight = dialogHeight + 77;\n    }\n  } \n  //make content string\n  skillHtml = skillHeader + skillList + skillFooter;\n  //bring up new dialog asking about adding skills\n  new Dialog({\n    title: `Stat Check`,\n    content: skillHtml,\n    buttons: {\n      button1: {\n        label: `Advantage`,\n        callback: (html) => rollCheck(html.find(\"input[name='skill']:checked\").attr(\"id\"),html.find(\"input[name='skill']:checked\").attr(\"value\"),rollStat,`1d100 [+]`),\n        icon: `<i class=\"fas fa-angle-double-up\"></i>`\n      },\n      button2: {\n        label: `Normal`,\n        callback: (html) => rollCheck(html.find(\"input[name='skill']:checked\").attr(\"id\"),html.find(\"input[name='skill']:checked\").attr(\"value\"),rollStat,`1d100`),\n        icon: `<i class=\"fas fa-minus\"></i>`\n      },\n      button3: {\n        label: `Disadvantage`,\n        callback: (html) => rollCheck(html.find(\"input[name='skill']:checked\").attr(\"id\"),html.find(\"input[name='skill']:checked\").attr(\"value\"),rollStat,`1d100 [-]`),\n        icon: `<i class=\"fas fa-angle-double-down\"></i>`\n      }\n    }\n  },{width: 600,height: dialogHeight}).render(true);\n}\n\nnew Dialog({\n  title: `Stat Check`,\n  content: `\n  <style>\n    .macro_window{\n      background: rgb(230,230,230);\n      border-radius: 9px;\n    }\n    .macro_img{\n      display: flex;\n      justify-content: center; //do I need this\n    }\n    .macro_desc{\n      font-family: \"Roboto\", sans-serif;\n      font-size: 10.5pt;\n      font-weight: 400;\n      padding-top: 8px;\n      padding-right: 8px;\n      padding-bottom: 8px;\n    }\n    .grid-2col {\n      display: grid;\n      grid-column: span 2 / span 2;\n      grid-template-columns: repeat(2, minmax(0, 1fr));\n      gap: 2px;\n      padding: 0;\n    }\n  </style>\n  \n  <div class =\"macro_window\" style=\"margin-bottom : 7px;\">\n    <div class=\"grid grid-2col\" style=\"grid-template-columns: 150px auto\">\n      <div class=\"macro_img\"><img src=\"modules/fvtt_mosh_1e_psg/icons/macros/stat_check.png\" style=\"border:none\"/></div>\n      <div class=\"macro_desc\"><h3>Stat Check</h3>You have four Stats which represent your ability to act under extreme pressure. Whenever you want to do something and the price for failure is high, roll a stat check. <strong>If you roll less than your Stat you succeed. Otherwise, you fail and gain 1 Stress.</strong> A roll of 90-99 is always a failure. A Critical Failure means something bad happens, and furthermore you must make a Panic Check.</div>    \n    </div>\n  </div>\n  <label for=\"str\">\n    <div class =\"macro_window\" style=\"margin-bottom : 7px; vertical-align: middle; padding-left: 3px;\">\n      <div class=\"grid grid-3col\" style=\"grid-template-columns: 20px 60px auto\">\n        <input type=\"radio\" id=\"str\" name=\"stat\" value=\"strength\" checked=\"checked\">\n        <div class=\"macro_img\" style=\"padding-top: 5px; padding-left: 0px; padding-right: 0px; padding-bottom: 5px;\"><img src=\"modules/fvtt_mosh_1e_psg/icons/attributes/strength.png\" style=\"border:none\"/></div>\n        <div class=\"macro_desc\" style=\"display: table;\">\n          <span style=\"display: table-cell; vertical-align: middle;\">\n            <strong>Strength:</strong> Forcing open jammed airlocks, carrying fallen comrades, holding on for dear life.\n          </span>\n        </div>    \n      </div>\n    </div>\n  </label>\n  <label for=\"spd\">\n    <div class =\"macro_window\" style=\"margin-bottom : 7px; vertical-align: middle; padding-left: 3px;\">\n      <div class=\"grid grid-3col\" style=\"grid-template-columns: 20px 60px auto\">\n        <input type=\"radio\" id=\"spd\" name=\"stat\" value=\"speed\">\n        <div class=\"macro_img\" style=\"padding-top: 5px; padding-left: 0px; padding-right: 0px; padding-bottom: 5px;\"><img src=\"modules/fvtt_mosh_1e_psg/icons/attributes/speed.png\" style=\"border:none\"/></div>\n        <div class=\"macro_desc\" style=\"display: table;\">\n          <span style=\"display: table-cell; vertical-align: middle;\">\n            <strong>Speed:</strong> Getting out of the cargo bay before the blast doors close, acting and reacting in a race against the clock.\n          </span>\n        </div>    \n      </div>\n    </div>\n  </label>\n  <label for=\"int\">\n    <div class =\"macro_window\" style=\"margin-bottom : 7px; vertical-align: middle; padding-left: 3px;\">\n      <div class=\"grid grid-3col\" style=\"grid-template-columns: 20px 60px auto\">\n        <input type=\"radio\" id=\"int\" name=\"stat\" value=\"intellect\">\n        <div class=\"macro_img\" style=\"padding-top: 5px; padding-left: 0px; padding-right: 0px; padding-bottom: 5px;\"><img src=\"modules/fvtt_mosh_1e_psg/icons/attributes/intellect.png\" style=\"border:none\"/></div>\n        <div class=\"macro_desc\" style=\"display: table;\">\n          <span style=\"display: table-cell; vertical-align: middle;\">\n            <strong>Intellect:</strong> Recalling your training and experience under duress.\n          </span>\n        </div>\n      </div>\n    </div>\n  </label>\n  <label for=\"com\">\n    <div class =\"macro_window\" style=\"margin-bottom : 7px; vertical-align: middle; padding-left: 3px;\">\n      <div class=\"grid grid-3col\" style=\"grid-template-columns: 20px 60px auto\">\n        <input type=\"radio\" id=\"com\" name=\"stat\" value=\"combat\">\n        <div class=\"macro_img\" style=\"padding-top: 5px; padding-left: 0px; padding-right: 0px; padding-bottom: 5px;\"><img src=\"modules/fvtt_mosh_1e_psg/icons/attributes/combat.png\" style=\"border:none\"/></div>\n        <div class=\"macro_desc\" style=\"display: table;\">\n          <span style=\"display: table-cell; vertical-align: middle;\">\n            <strong>Combat:</strong> Fighting for your life.\n          </span>\n        </div>    \n      </div>\n    </div>\n  </label>\n  `,\n  buttons: {\n    button1: {\n      label: `Next`,\n      callback: (html) => addSkill(html.find(\"input[name='stat']:checked\").val()),\n      icon: `<i class=\"fas fa-chevron-circle-right\"></i>`\n    }\n  }\n},{width: 600,height: 545}).render(true);","folder":null,"flags":{},"_stats": {"systemId":"mosh","systemVersion":"0.3.7","coreVersion":"11.300","createdTime":1685936572185,"modifiedTime":1686006479278,"lastModifiedBy":"6EeM38DJkcBWNAmw"}}
{"_id":"meltTUhkR2Kfbhvw","name":"Wound Check","type":"script","scope":"global","img":"modules/fvtt_mosh_1e_psg/icons/macros/wound_check.png","command":"async function rollCheck(rollTable,rollString) {\n  //init vars\n  rollAdvDis = rollString.includes(\"[\");\n  //translate rollString into foundry roll string format\n  if (rollAdvDis === true) {\n    //extract dice needed\n    rollDice = rollString.substr(0,rollString.indexOf(\"[\")).concat(',',rollString.substr(0,rollString.indexOf(\"[\")));\n    //make adv/dis template\n    rollTemplate = '{[diceSet]}';\n    //make foundry roll string\n    rollStringParsed = rollTemplate.replace(\"[diceSet]\",rollDice);\n  } else {\n    rollStringParsed = rollString;\n  }\n  //roll dice\n  let macroRoll = await new Roll(rollStringParsed).evaluate();\n  //assign to vars + replace 10s with 0s\n  if (rollAdvDis === true) {\n    //get values\n    rollA1 = macroRoll.dice[0].results[0].result;\n    rollB1 = macroRoll.dice[1].results[0].result;\n    //replace 10s\n    if (rollA1 === 10) {rollA1 = 0;}\n    if (rollB1 === 10) {rollB1 = 0;}\n  } else {\n    //get values\n    rollA1 = macroRoll.dice[0].results[0].result;\n    //replace 10s\n    if (rollA1 === 10) {rollA1= 0;}\n  }\n  //choose best value based on Adv/Dis\n  if (rollAdvDis === true) {\n    if (rollString.includes(\"[+]\") === true) {\n      if(rollA1 < rollB1) { \n        finalRoll = rollA1;\n      } else {\n        finalRoll = rollB1;\n      }\n    } else if (rollString.includes(\"[-]\") === true) {\n      if(rollA1 > rollB1) { \n        finalRoll = rollA1;\n      } else {\n        finalRoll = rollB1;\n      }\n    }\n  } else {\n    finalRoll = rollA1;\n  }\n  //get table result\n  tableResult = game.tables.getName(rollTable).getResultsForRoll(finalRoll);\n  //create chat message template\n  macroResult = `\n  <div class=\"mosh\">\n    <div class=\"rollcontainer\">\n      <div class=\"flexrow\" style=\"margin-bottom : 5px;\">\n        <div class=\"rollweaponh1\">${tableResult[0].parent.name}</div>\n        <div style=\"text-align: right\"><img class=\"roll-image\" src=\"${tableResult[0].img}\" title=\"${tableResult[0].parent.name}\" /></div>\n      </div>\n      <div class=\"description\" style=\"margin-bottom : 20px;\">${tableResult[0].text}</div>\n    </div>\n  </div>\n  `;\n  //make message ID\n  chatId = randomID();\n  //get speaker character\n  activeCharacter = canvas.scene.data.tokens.find(token => token.name = game.user.character.name);\n  //make message\n  macroMsg = await macroRoll.toMessage({\n    id: chatId,\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker({token: activeCharacter}),\n    content: macroResult\n  },{keepId:true});\n  //make dice\n  await game.dice3d.waitFor3DAnimationByMessageID(chatId);\n}\n  \nnew Dialog({\n  title: `Wound Check`,\n  content: `\n<style>\n  .macro_window{\n    background: rgb(230,230,230);\n    border-radius: 9px;\n  }\n  .macro_img{\n    display: flex;\n    justify-content: center;\n  }\n  .macro_desc{\n    font-family: \"Roboto\", sans-serif;\n    font-size: 10.5pt;\n    font-weight: 400;\n    padding-top: 8px;\n    padding-right: 8px;\n    padding-bottom: 8px;\n  }\n  .grid-2col {\n    display: grid;\n    grid-column: span 2 / span 2;\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n    gap: 2px;\n    padding: 0;\n  }\n</style>\n\n<div class =\"macro_window\" style=\"margin-bottom : 7px;\">\n  <div class=\"grid grid-2col\" style=\"grid-template-columns: 150px auto\">\n    <div class=\"macro_img\"><img src=\"modules/fvtt_mosh_1e_psg/icons/macros/wound_check.png\" style=\"border:none\"/></div>\n    <div class=\"macro_desc\"><h3>Wound Check</h3>Make a <strong>Wound Check</strong> according to the type of Damage received. Flesh Wounds are small inconveniences. Both Minor and Major Injuries cause lasting Damage that requires treatment. Lethal Injuries can kill you if not dealt with immediately. And Fatal Injuries can potentially kill you outright. Additionally, some Wounds cause Bleeding, which if not stopped can quickly overwhelm you.</div>    \n  </div>\n</div>\n<label for=\"bf\">\n  <div class =\"macro_window\" style=\"margin-bottom : 7px; vertical-align: middle; padding-left: 3px;\">\n    <div class=\"grid grid-3col\" style=\"grid-template-columns: 20px 60px auto\">\n      <input type=\"radio\" id=\"bf\" name=\"wound_table\" value=\"Blunt Force Wound\" checked=\"checked\">\n      <div class=\"macro_img\" style=\"padding-top: 5px; padding-left: 0px; padding-right: 0px; padding-bottom: 5px;\"><img src=\"modules/fvtt_mosh_1e_psg/icons/rolltables/wounds_blunt_force.png\" style=\"border:none\"/></div>\n      <div class=\"macro_desc\" style=\"display: table;\">\n        <span style=\"display: table-cell; vertical-align: middle;\">\n          <strong>Blunt Force:</strong> Getting punched, hit with a crowbar or a thrown object, falling, etc.\n        </span>\n      </div>\n    </div>\n  </div>\n</label>\n<label for=\"b\">\n<div class =\"macro_window\" style=\"margin-bottom : 7px; vertical-align: middle; padding-left: 3px;\">\n  <div class=\"grid grid-3col\" style=\"grid-template-columns: 20px 60px auto\">\n    <input type=\"radio\" id=\"b\" name=\"wound_table\" value=\"Bleeding Wound\">\n    <div class=\"macro_img\" style=\"padding-top: 5px; padding-left: 0px; padding-right: 0px; padding-bottom: 5px;\"><img src=\"modules/fvtt_mosh_1e_psg/icons/rolltables/wounds_bleeding.png\" style=\"border:none\"/></div>\n    <div class=\"macro_desc\" style=\"display: table;\">\n      <span style=\"display: table-cell; vertical-align: middle;\">\n        <strong>Bleeding:</strong> Getting stabbed or cut.\n      </span>\n    </div>\n  </div>\n</div>\n</label>\n<label for=\"g\">\n<div class =\"macro_window\" style=\"margin-bottom : 7px; vertical-align: middle; padding-left: 3px;\">\n  <div class=\"grid grid-3col\" style=\"grid-template-columns: 20px 60px auto\">\n    <input type=\"radio\" id=\"g\" name=\"wound_table\" value=\"Gunshot Wound\">\n    <div class=\"macro_img\" style=\"padding-top: 5px; padding-left: 0px; padding-right: 0px; padding-bottom: 5px;\"><img src=\"modules/fvtt_mosh_1e_psg/icons/rolltables/wounds_gunshot.png\" style=\"border:none\"/></div>\n    <div class=\"macro_desc\" style=\"display: table;\">\n      <span style=\"display: table-cell; vertical-align: middle;\">\n        <strong>Gunshot:</strong> Getting shot by a firearm.\n      </span>\n    </div>\n  </div>\n</div>\n</label>\n<label for=\"fe\">\n<div class =\"macro_window\" style=\"margin-bottom : 7px; vertical-align: middle; padding-left: 3px;\">\n  <div class=\"grid grid-3col\" style=\"grid-template-columns: 20px 60px auto\">\n    <input type=\"radio\" id=\"fe\" name=\"wound_table\" value=\"Fire & Explosives Wound\">\n    <div class=\"macro_img\" style=\"padding-top: 5px; padding-left: 0px; padding-right: 0px; padding-bottom: 5px;\"><img src=\"modules/fvtt_mosh_1e_psg/icons/rolltables/wounds_fire_&_explosives.png\" style=\"border:none\"/></div>\n    <div class=\"macro_desc\" style=\"display: table;\">\n      <span style=\"display: table-cell; vertical-align: middle;\">\n        <strong>Fire & Explosives:</strong> Grenades, flamethrowers, doused in fuel and lit on fire, etc.\n      </span>\n    </div>\n  </div>\n</div>\n</label>\n<label for=\"gm\">\n<div class =\"macro_window\" style=\"margin-bottom : 7px; vertical-align: middle; padding-left: 3px;\">\n  <div class=\"grid grid-3col\" style=\"grid-template-columns: 20px 60px auto\">\n    <input type=\"radio\" id=\"gm\" name=\"wound_table\" value=\"Gore & Massive Wound\">\n    <div class=\"macro_img\" style=\"padding-top: 5px; padding-left: 0px; padding-right: 0px; padding-bottom: 5px;\"><img src=\"modules/fvtt_mosh_1e_psg/icons/rolltables/wounds_gore_&_massive.png\" style=\"border:none\"/></div>\n    <div class=\"macro_desc\" style=\"display: table;\">\n      <span style=\"display: table-cell; vertical-align: middle;\">\n        <strong>Gore & Massive:</strong> Damage from giant creatures or particularly gruesome foes.\n      </span>\n    </div>\n  </div>\n</div>\n</label>\n\n<h4>Select your roll type:</h4>\n`,\n  buttons: {\n    button1: {\n      label: `Advantage`,\n      callback: (html) => rollCheck(html.find(\"input[name='wound_table']:checked\").val(),`1d10 [+]`),\n      icon: `<i class=\"fas fa-angle-double-up\"></i>`\n    },\n    button2: {\n      label: `Normal`,\n      callback: (html) => rollCheck(html.find(\"input[name='wound_table']:checked\").val(),`1d10`),\n      icon: `<i class=\"fas fa-minus\"></i>`\n    },\n    button3: {\n      label: `Disadvantage`,\n      callback: (html) => rollCheck(html.find(\"input[name='wound_table']:checked\").val(),`1d10 [-]`),\n      icon: `<i class=\"fas fa-angle-double-down\"></i>`\n    }\n  }\n},{width: 600,height: 650}).render(true);","folder":null,"flags":{},"_stats": {"systemId":"mosh","systemVersion":"0.3.7","coreVersion":"11.300","createdTime":1685936572185,"modifiedTime":1686006479278,"lastModifiedBy":"6EeM38DJkcBWNAmw"}}